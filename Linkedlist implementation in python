{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNILdlidOrpFF7NjsVP5+oD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":24,"metadata":{"id":"uw0q5tbVkqHE","executionInfo":{"status":"ok","timestamp":1726625768129,"user_tz":720,"elapsed":653,"user":{"displayName":"Bodo","userId":"06887307652885792513"}}},"outputs":[],"source":["class Node:\n","\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n",""]},{"cell_type":"code","source":["class LinkedList:\n","  def __init__(self):\n","    self.head=None\n","\n","  def insert_end(self,data):\n","    new_node=Node(data)\n","    if not self.head:\n","      self.head=new_node\n","      return\n","\n","    current=self.head\n","    while current.next:\n","      current=current.next\n","\n","    current.next=new_node\n","\n","\n","  def delete(self,index):\n","    if index<0 or index >= self.length():\n","      raise IndexError(\"Invalid index\")\n","\n","    if index==0:\n","      self.head=self.head.next # head = head.address(None) because the list has only one element\n","      return\n","\n","    current=self.head\n","    for _ in range(index-1):\n","      current=current.next\n","    current.next=current.next.next\n","\n","\n","\n","\n","  def length(self):\n","    count=0\n","    current=self.head\n","    while current:\n","      count+=1\n","      current=current.next\n","    return count\n","\n","  def print_list(self):\n","    current=self.head\n","    while current:\n","      print(current.data,end='')\n","      current=current.next\n","    print()\n","\n","\n","  def length(self):\n","    count=0\n","    current=self.head\n","    while current:\n","      count+=1\n","      current=current.next\n","    return count\n","\n","  def print_list(self):\n","    current=self.head\n","    while current:\n","      print(current.data,end='')\n","      current=current.next\n","    print()\n","\n","\n","  def insert_index(self,index,data):\n","    if index<0 or index > self.length():\n","      raise IndexError(\"Invalid index\")\n","\n","    if index==0:\n","      new_node=Node(data)\n","      new_node.next=self.head\n","      self.head=new_node\n","      return\n","    current=self.head\n","    for _ in range(index-1):\n","      current=current.next\n","      new_node=Node(data)\n","      new_node.next=current.next\n","      current.next=new_node\n"],"metadata":{"id":"DwDyiHm5zQKf","executionInfo":{"status":"ok","timestamp":1726625819366,"user_tz":720,"elapsed":474,"user":{"displayName":"Bodo","userId":"06887307652885792513"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["ll=LinkedList()\n","ll.insert_end(1)\n","ll.insert_end(1)\n","ll.insert_end(1)\n","ll.insert_end(1)\n","ll.insert_end(1)\n","ll.insert_index(2,22)\n","ll.delete(4)\n","\n","ll.print_list()\n","ll.length()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HvztW29-6FsI","executionInfo":{"status":"ok","timestamp":1726625856083,"user_tz":720,"elapsed":491,"user":{"displayName":"Bodo","userId":"06887307652885792513"}},"outputId":"69949189-53e6-42e4-fb06-9734823cd0e0"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["112211\n"]},{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":29}]}]}